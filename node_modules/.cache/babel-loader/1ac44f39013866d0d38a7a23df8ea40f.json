{"ast":null,"code":"import _slicedToArray from \"/home/alcantara/Cursos/pipeclone/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alcantara/Cursos/pipeclone/frontend/src/components/Board/index.js\";\nimport React, { useState, useCallback } from 'react';\nimport { produce } from 'immer';\nimport { loadLists } from '../../services/api';\nimport List from '../List';\nimport BoardContext from './context';\nimport { Container } from './styles';\nconst data = loadLists();\nexport default function Board() {\n  const _useState = useState(data),\n        _useState2 = _slicedToArray(_useState, 2),\n        lists = _useState2[0],\n        setLists = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isMovingCard = _useState4[0],\n        setIsMovingCard = _useState4[1];\n\n  const handleDrop = useCallback((index, item) => {\n    if (!isMovingCard) {\n      setLists(produce(lists, draft => {\n        const dragged = draft[item.listIndex].cards[item.index];\n        draft[item.listIndex].cards.splice(item.index, 1);\n        draft[index].cards.push(dragged);\n      }));\n    } else {\n      setIsMovingCard(false);\n    }\n  });\n\n  function move(fromList, toList, from, to) {\n    setLists(produce(lists, draft => {\n      const dragged = draft[fromList].cards[from];\n      setIsMovingCard(true);\n      draft[fromList].cards.splice(from, 1);\n      draft[toList].cards.splice(to, 0, dragged);\n    }));\n  }\n\n  return React.createElement(BoardContext.Provider, {\n    value: {\n      lists,\n      move\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, lists.map((list, index) => React.createElement(List, {\n    key: list.title,\n    index: index,\n    data: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), lists.map((list, index) => React.createElement(List, {\n    accepts: ['CARD'],\n    onDrop: item => handleDrop(index, item),\n    key: list.title,\n    index: index,\n    data: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/home/alcantara/Cursos/pipeclone/frontend/src/components/Board/index.js"],"names":["React","useState","useCallback","produce","loadLists","List","BoardContext","Container","data","Board","lists","setLists","isMovingCard","setIsMovingCard","handleDrop","index","item","draft","dragged","listIndex","cards","splice","push","move","fromList","toList","from","to","map","list","title"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { produce } from 'immer';\n\nimport { loadLists } from '../../services/api';\nimport List from '../List';\n\nimport BoardContext from './context';\n\nimport { Container } from './styles';\n\nconst data = loadLists();\n\nexport default function Board() {\n  const [lists, setLists] = useState(data);\n  const [isMovingCard, setIsMovingCard] = useState(false);\n\n\n  const handleDrop = useCallback(\n    (index, item) => {\n      if(!isMovingCard){\n        setLists(produce(lists, draft => {\n          const dragged = draft[item.listIndex].cards[item.index];\n          draft[item.listIndex].cards.splice(item.index, 1);\n          draft[index].cards.push(dragged);\n        }))\n      }else{\n        setIsMovingCard(false);\n      }\n    },\n  )\n\n  function move(fromList, toList, from, to) {\n    setLists(produce(lists, draft => {\n      const dragged = draft[fromList].cards[from];\n\n      setIsMovingCard(true);\n      draft[fromList].cards.splice(from, 1);\n      draft[toList].cards.splice(to, 0, dragged);\n    }));\n  }\n\n  return (\n    <BoardContext.Provider value={{ lists, move }}>\n       <Container>\n        {lists.map((list, index) => <List key={list.title} index={index} data={list} />)}\n        {lists.map((list, index) => <List accepts={['CARD']} onDrop={item => handleDrop(index, item)} key={list.title} index={index} data={list} />)}\n      </Container>\n    </BoardContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}